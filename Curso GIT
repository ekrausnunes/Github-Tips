Curso GIT
---------------------
Configurações básicas
---------------------
-Configurar usuário global
git config --global user.name "Eduardo Kraus Nunes"

-Configurar e-mail
git config --global user.email "ekrausnunes@gmail.com"

-Definir editor
git config --global core.editor subl

-Saber quem é o usuário do git
git config user.name

-Saber o e-mail
git config user.email

-Para saber todas as configurações
git config --list

----------------------------------
Essencial do GIT
----------------------------------
-Criar pasta
mkdir git-course

-Acessar pasta
cd git-course/

-Inicializar, tem que se feito sempre dentro do repositório
git init

-Ver todos os conteudos da pasta, mesmo os ocultos
ls -la

-Acessar repositório
cd .git

-Exibir conteudo do repositório
ls

-Voltar diretório
cd ..

-Status do GIT
	-untracked: ainda não foi adicionado ao GIT;
	-unmodified: foi adicionado no GIT e não possui nenhuma alteração;
	-modified: existe uma alteração nesse arquivo;
	-staged: um status que serve para armazenar todos os arquivos que devem ser levados quando foi dado o commit e após o commit, todos os arquivos voltam para o status de unmodified;

-Exibir o status do repositório
git status

-Adicionar arquivo recentimente criado (untracked)	
git add nome_arquivo
git add Readme.md

-Criando um snapshot
git commit -m "Add Readme.md"

-Snapshot é uma foto do repositório naquele momento, cada commit é tirado um Snapshot.

-Hash é um convjunto de letras e números que são gerados a partir de um commit, com esse hasc é possível voltar versões, etc.

-Visualizando Logs
git log
	-Mostra mais informações (branch, tags, merge)
	git log --decorate

	-Filtrando por algum autor
	git log --author="Eduardo"

	-Logs curto, é ordenado por autor, quantos commits o cara fez, etc.
	git shortlog

	-Logs só de quantidade de pessoas e suas quantidades de commits
	git shortlog -sn

	-Mostra de forma gráfica o que esta acontecendo com o branch e suas versões
	git log --graph

	-Pesquisar pela ref
	git show (e dai informar a ref do commit, exemplo: "git show bf3046f449fc4d702b431ea530cfac1d4a39992a") 

-Verificar as diferenças
git diff
	-Mostra somente o nome do arquivo modificado
	git diff --name-only

-Dando um commit nos arquivos alterados que já existem. O -am o "a" é para mandar o arquivo e o "m" para mandar uma mensagem.
git commit -am "Edit Readme"

-Atualizando um arquivo alterado que você ainda não tenha dado commit nas alterações nem adicionou essas alterações para ser dado o commit. Esse comando não volta as alteraçoes caso o arquivo já esteja no status "staged". Com esse comando ele baixa a ultima versão do arquivo no git sem a sua alteração local, em outras palavras ele "queima" as suas alterações.
git checkout "Readme.md"

-Tirar arquivo da fila do status de "staged", pois nesse quando for dado commit tudo que tem neste estado vai para a HEAD/Branch. Assim com esse comando o arquivo volta ao status de "modified" com pendencias para adicionar. 
git reset HEAD Readme.md

-Como voltar um arquivo que foi commitado erroneamente. São 3 opções para isso:
	-Mata o commit que foi dado com isso as alterações saem da HEAD, mas o arquivo volta a ter o status "staged", pronto para ser commitado novamente. Lembrando aqui que tem que ser informado a hash do arquivo anterior, tem que ser informada hash de antes do arquivo ser commitado pois aquela que foi realizado o commit irá deixar de existir.
	git reset --soft (mais a hash do arquivo, exemplo "git reset --soft bf3046f449fc4d702b431ea530cfac1d4a39992a")
	
	-Mata o commit dado e volta os arquivos para o status antes do "staged" que é o "modified"
	git reset --mixed (mais a hash do arquivo, exemplo "git reset --mixed bf3046f449fc4d702b431ea530cfac1d4a39992a")
	
	-Mata o commit e mata todas as alterações que foram feitas neles, com isso você perde todas as modificações que foram dadas no commit.
	git reset --hard (mais a hash do arquivo, exemplo "git reset --har dbf3046f449fc4d702b431ea530cfac1d4a39992a")

-Ligando o repositório local do git com o github, após ter logado e criado um repositório no github, realizar o comando abaixo, pois ele contém o caminho do github, com o qual você vai vincular o seu projeto local.
	git remote add origin https://github.com/ekrausnunes/github-course.git
	- o -u é para trackear, para só precisar da um git push e ali eu digo que meu git master(local)vai para o meu github (origin).
	git push -u origin master


-Vendo os repositórios remotos
git remote

-Vendo os repositório com mais detalhes (o caminho dele)
git remote -v

-Sincronizar os commits do git com o github, necessário realizar um push
git push origin master (o origin é o meu github  e o master é tudo que eu tenho no meu git)

-Clonando o seu projeto em outros ambientes de trabalho (Casa, trabalho, etc.), o link o github fornece, então quando quiser clonar um repositório apenas pegar esse link e dar um clone. Lembrando de fazer isso fora do repositório do seu projeto, pois ele vai copiar o projeto novo. E depois do link colocar o nome que você quer.
git clone https://github.com/ekrausnunes/github-course.git github-course-clone

-Copiando projetos que não são seus, utilizando o Fork. Exemplo, você quer contribuir com um projeto, logo você vai no github e irá dar um Fork nele. Com isso ele copia todo o repositório daquele projeto, par ao seu repositório, para sua conta.

-Branch é um ponteiro móvel que leva a um commit. Ele é uma versão paralela do "Master".

-Criando um Branch. O significado do -b, é dizer ao git que você está criando um branch.
git checkout -b testing
git checkout + -b + nome do branch

-Comando para saber em qual branch você está trabalhando. Ele vai mostrar todos os branch e o master e dizer em qual você está.
git branch

-Comando para escolher o branch que eu quero trabalhar
git checkout testing 

-Apagar um branch. -D serve para dizer que ele será deletado da árvore, mais o nome do branch a ser deletado. Sendo que quando for deletar você não pode estar apontado para aquele branch.
git branch -D testing

-Merge, maneira para unir branches;
	- Sempre quando for dado o merge será dado um commit a mais para juntar tudo;
	- Merge não é uma solução destrutiva, ele uni todas as modificações;
	- O histórico fica em forme de diamante, triangulo, pois ele mantém os outros branchs;

-Rebase, move um branch para a última posição da árvore;
git rebase nome-do-
	- Ele não cria commit extra;
	- O histórico é linear;
	- O histórico perde a ordem cronologica;

-Stash, responsavel por guardar informações que ainda não foram commitadas em um arquivo;
 	- Ele serve para quando você altera algum fonte mas não quer commitar, então você da um git stash para que ele guarde essas alterações para num futuro você commitar.
git stash
git stash apply
git stash list
git stash clear

-Alias, criar alias para os comandos. Ex.: git status -> git s
git config --global alias.s(o "s" aqui é o atalho que eu quero seguido do comando) status

-Tag, criar uma marcação
git tag -a 1.0.0 -m "Readme finalizado"
git push orgin master --tags

-Deletar tag
git tag -d 1.0.0

-Revert, ele volta um commit escolhido da produção. Ele não tira o commit na produção, apenas o que foi alterado.
git revert b1f64df3aa10267d5e40a4c669732582f6f5ac6d

-Apagar tags e branches de repositorios remotos (github)
git push origin :1.0.0